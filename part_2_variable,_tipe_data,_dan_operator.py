# -*- coding: utf-8 -*-
"""Part 2 : Variable, Tipe Data, dan Operator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_bXWx6mFM_aKWs-g8LFxFsOBf_6vSfAG

# VARIABLE DALAM PEMROGRAMAN PYTHON

Dalam Python, **variabel** dapat diilustrasikan sebagai wadah yang menyimpan sebuah nilai. Dapat digunakan sebagai label untuk data yang disimpan dalam memori komputer, sehingga memungkinkan programmer untuk menyimpan, mengambil, dan memanipulasi data dalam program yang dibuatnya secara mudah dan fleksibel.

## Beberapa Poin Penting tentang Variabel:

1. **Penamaan**: Sebuah Variabel dapat diberi nama apapun, asalkan dimulai dengan huruf atau garis bawah (`_`) dan diikuti oleh huruf, angka, atau garis bawah. Sebagai contoh, `usia`, `total_nilai`, dan `_sementara` adalah nama-nama variabel yang valid.

2. ***Assignment***: Dalam python, sebuah variabel dideklarasikan secara sederhana, dengan menggunakan operator penugasan `=`. Sintaksnya adalah `nama_variabel = nilai`. Contohnya:
   ```python
   usia = 25      # Assign angka bulat 25 ke variabel usia
   nama = "Alice" # Assign string "Alice" ke variabel nama
   pi = 3.14      # Assign angka desimal 3.14 ke variabel pi
   ```

3. **Tipe Data**: Variabel dapat menyimpan berbagai tipe data, seperti angka, string, daftar, atau struktur yang lebih kompleks. Python secara otomatis mendeteksi tipe data yang di-*assign* ke variabel.

4. **Tipe Dinamis**: Python adalah bahasa yang bertipe dinamis, artinya programmer tidak perlu menyatakan tipe variabel saat *assignment*. Selain itu, perubahan tipe data yang disimpan dalam variabel dapat dilakukan cukup dengan memberikan nilai baru. Meskipun demikian, programmer juga dapat melakukan *type hinting* pada saat *assignment* jika memang diperlukan.
   ```python
   jumlah = 10  # jumlah adalah bilangan bulat
   jumlah = "sepuluh"  # jumlah sekarang adalah string
   # Assignment dengan type hinting
   angka_bulat : int = 10
   angka_float : float = 3.14
   nama_lengkap : str = "Rikrik Rahadian"
   ```

5. **Penggunaan Variabel**: Setelah dilakukan *assignment*, seorang programmer dapat menggunakan variabel di setiap bagian dari programnya untuk menyimpan dan bekerja dengan nilai yang di*assign* ke dalamnya. Misalnya, dicetak ke layar, dipergunakan dalam perhitungan, atau dijadikan sebagai input bagi sebuah fungsi.
   ```python
   # Assignment
   harga = 100
   diskon = 0.2
   # Perhitungan dan Assignment hasilnya
   harga_akhir = harga * (1 - diskon)
   # Mencetak hasil perhitungan ke layar
   print(harga_akhir)  # Output: 80.0
   ```

6. **Lingkup (Scope)**: Variabel memiliki lingkup, yang menentukan pada bagian mana dari program--variabel **lokal** atau **global**--variabel tersebut dapat diakses. Variabel yang di-*assign* di dalam sebuah fungsi akan bersifat lokal, sehingga hanya berlaku di dalam fungsi tersebut, sedangkan variabel yang di-*assign* di luar fungsi akan bersifat global dan tersedia untuk diakses dari mana saja dalam kode.

---

Singkatnya, variabel sangat penting dalam pemrograman Python karena memungkinkan programmer untuk menyimpan, mengelola, dan menggunakan data secara efektif dalam kode yang dituliskannya. Variabel menyediakan cara untuk merujuk nilai dengan menggunakan nama yang diberikan, sehingga program yang dikembangkan menjadi lebih mudah dibaca dan fleksibel.

---
# NUMERICAL DATA : `Integer & Float`

Python mendukung penggunaan dua tipe data numerik utama, yaitu: **integer** dan **float**.

## Integer (`int`)

- **Definisi**: Integer adalah bilangan bulat yang tidak memiliki bagian desimal. Integer dapat bernilai positif atau negatif, termasuk nol.
- **Contoh**:
  ```python
  angka_positif = 10
  angka_negatif = -5
  nol = 0
  ```
- **Penggunaan**: Integer biasanya digunakan untuk perhitungan yang tidak memerlukan nilai pecahan atau desimal, seperti penghitungan jumlah orang atau benda.

## Float (`float`)

- **Definisi**: Float adalah bilangan yang memiliki bagian desimal, memungkinkan representasi angka dengan pecahan.
- **Contoh**:
  ```python
  pi = 3.14
  suhu = -10.5
  saldo = 1000.75
  ```
- **Penggunaan**: Float digunakan dalam perhitungan yang membutuhkan presisi, seperti pengukuran ilmiah, penghitungan keuangan, atau grafik komputer.

## Konversi Tipe Data Numerikal (*Casting*)

Python memungkinkan untuk melakukan konversi data dari integer ke float, *vice versa*. Konversi ini dapat dilakukan dengan memasukkan angka ke fungsi `int()` dan/atau `float()`:

- **Integer ke Float**:
  ```python
  float_angka = float(10)  # Output: 10.0
  ```

- **Float ke Integer** (pembulatan ke bawah):
  ```python
  int_angka = int(3.99)  # Output: 3
  ```

Python secara otomatis menangani angka dengan presisi yang baik, tetapi penting untuk diingat bahwa operasi dengan float mungkin menghasilkan hasil yang mendekati nilai sebenarnya karena keterbatasan representasi komputer. Data numerik integer dan float sangat penting dalam pemrograman, memungkinkan programmer untuk melakukan berbagai jenis perhitungan dan analisis data.
## Arithmetic Operations
Dalam pemrograman Python sangat dimungkinkan untuk melakukan berbagai jenis arithmetic operations, yang dilakukan dengan memanfaatkan berbagai simbol *operators*. Pada bagian berikut di bawah ini disampaikan beberapa operasi arithmetic dasar beserta simbolnya yang dapat dipergunakan dalam pemrosesan data menggunakan Python:

1. **Addition (`+`)**: Penjumlahan dua angka.
   ```python
   result = 5 + 3  # Output: 8
   ```
2. **Subtraction (`-`)**: Pengurangan angka dari sebuah angka lain.
   ```python
   result = 5 - 3  # Output: 2
   ```
3. **Multiplication (`*`)**: Perkalian dua angka.
   ```python
   result = 5 * 3  # Output: 15
   ```
4. **Division (`/`)**: Pembagian angka oleh angka lainnya.
   ```python
   result = 5 / 2  # Output: 2.5
   ```
5. **Floor Division (`//`)**: Pembagian angka oleh angka lainnya dan hasilnya dibulatkan ke bawah.
   ```python
   result = 5 // 2  # Output: 2
   ```
6. **Modulus (`%`)**: Menghitung sisa dari hasil pembagian angka oleh angka lainnya.
   ```python
   result = 5 % 2  # Output: 1
   ```
7. **Exponentiation (` ** `)**: Pemangkatan angka.
   ```python
   result = 5 ** 2  # Output: 25
   ```
8. **Negation (`-`)**: Merubah nilai sebuah angka menjadi kebalikannya.
   ```python
   numeric = 5
   negation = -numeric # Output: -5
   ```
9. **Compound Assignment**: Operator yang mengkombinasikan berbagai operator aritmatika di atas dengan operator *assignment* (`=`) untuk melakukan operasi kumulatif dalam satu langkah.
   ```python
   initial_value = 0
   initial_value += 1 # Output: 1
   initial_value -= 1 # Output: 0
   ```


Berbagai operasi di atas memungkinkan program yang disusun dengan berbasis Python untuk melakukan berbagai jenis kalkulasi matematis. Setiap operasi tersebut dipergunakan untuk memanipulasi angka dan dapat diterapkan terhadap baik data berjenis `int` maupun `float`.

## Praktek Data Numerical

### 1. *Integer*
"""

# Assignment
data_integer = 5 # Assign 5 to data_integer

# Pengecekan tipe data
type(data_integer)

print(data_integer)

data_integer

"""### 2. *Float*"""

from numpy import pi
# Assignment
nilai_pi = pi

# Pengecekan tipe data
type(nilai_pi)

nilai_pi

pi

"""### 3. *Arithmetic Operations*"""

# Addition
addition = data_integer + nilai_pi
addition

# substraction
substraction = data_integer - nilai_pi
substraction

# multiplication
multiplication = data_integer * nilai_pi
multiplication

# division
division = data_integer / nilai_pi
division

# floor division
bagi_pembulatan = data_integer // 3
bagi_pembulatan

# modulus
modulo = data_integer % 3
modulo

# negation
negasi = -data_integer
negasi

# exponentiation
pangkat = data_integer ** data_integer
pangkat

# Compound Assignment
data_inisial = data_integer

# +=
data_inisial += 1
data_inisial

# Compund Assignment -
data_inisial -= 1
data_inisial

"""___
#### 1. PENGENALAN PENGOLAHAN DATA `numeric`
"""

# Parsing Data from `csv` file to `DataFrame`
# 1. Import modul `pandas`
import pandas as pd

# 2. Set variabel `file_path`
file_path = "https://storage.googleapis.com/dqlab-dataset/SuperStore.csv"

# 3. Parse data pada file dan assign ke `df_sales`
df_sales = pd.read_csv(file_path)

# 4. Check isi `df_sales`
df_sales.head()

# Menghitung Harga per unit dari setiap transaksi (Sales / Quantity)
df_sales["Price"] = df_sales['Sales'] / df_sales['Quantity']

# Menghitung `Net_Sales` (Sales * (1 - Discount))
df_sales['Net_Sales'] = df_sales['Sales'] * (1 - df_sales['Discount'])

# Check isi `df_sales`
df_sales.head()

"""---
# BOOLEAN DATA
## Pengertian
Tipe data Booleann(`bool`) adalah tipe data yang hanya memiliki dua nilai: `True` (benar) dan `False` (salah). Di Python, tipe data ini sangat berguna untuk operasi logika dan kontrol alur program.

## Penggunaan
1. **Kondisi dan Percabangan**: Boolean sering digunakan dalam pernyataan kondisional seperti `if`, `else`, dan `elif` untuk menentukan alur eksekusi program berdasarkan kondisi tertentu.

   ```python
   is_raining = True
   if is_raining:
       print("Bawa payung!")
   else:
       print("Tidak perlu payung.")
   ```

2. **Operator Logika**: Boolean digunakan dengan operator logika seperti `and`, `or`, dan `not` untuk menggabungkan beberapa kondisi.

   ```python
   is_sunny = False
   is_windy = True

   if is_sunny and not is_windy:
       print("Bagus untuk piknik.")
   else:
       print("Lebih baik di dalam rumah.")
   ```

3. **Konversi Tipe**: Nilai lain di Python dapat dikonversi menjadi Boolean menggunakan fungsi `bool()`. Misalnya, angka `0` dan string kosong `''` akan dikonversi menjadi `False`, sedangkan angka bukan nol dan string non-kosong akan dikonversi menjadi `True`.

   ```python
   print(bool(0))      # Output: False
   print(bool(1))      # Output: True
   print(bool(""))     # Output: False
   print(bool("Halo")) # Output: True
   ```

## Kesimpulan
Tipe data Boolean di Python sangat penting untuk kontrol alur program dan evaluasi logika. Memahami cara kerja dan penggunaannya akan membantu dalam penulisan kode yang lebih efisien dan efektif.

## Praktek Boolean Data
"""

# cara penulisan nilai True yang benar
True

# cara penulisan nilai False yang benar
False

# penulisan true yang salah, colab akan menganggap 'true' sebagai nama variabel
false

"""### Operasi Logika

#### 1. Operator `and` [&]
"""

# kondisi yang dihubungkan dengan operator and akan bernilai benar jika semua kondisi benar
True and True

True & True

True and False

False and False

# contoh: seseorang akan mendapatkan pekerjaan jika rajin dan upgrade skill
is_rajin = True
is_upgrade_skill = True

get_job = is_rajin and is_upgrade_skill

get_job

"""#### 2. Operator `or` [ | ]"""

# kondisi yang dihubungkan dengan operator or akan bernilai benar jika salah satu kondisi benar
True or True

True | True

True or False

False or False

# seseorang dikatakan dari fakultas mipa jika dia dari jurusan matematika atau dari jurusan IPA
is_matematika = True
is_ipa = False

is_mipa = is_matematika or is_ipa

is_mipa

"""### Operasi Arithmetic
Operasi numerik dapat berlaku untuk data Boolean, karena pada dasarnya True memiliki nilai 1 dan False memiliki nilai 0.
"""

True + True

False + False

3 * True

float(True)

float(False)

"""### Operasi Perbandingan
Operasi perbandingan dilakukan menggunakan operator:
- '>' lebih dari
- '<' kurang dari
- '>=' lebih dari atau sama dengan
- '<=' kurang dari atau sama dengan
- '==' sama dengan
- '!=' tidak sama dengan

operasi perbandingan akan menghasilkan True atau False
"""

# Lebih dari
data_integer > nilai_pi

#Kurang dari
data_integer < nilai_pi

# Sama dengan
data_integer == nilai_pi

# Tidak sama dengan
data_integer != nilai_pi

"""___
#### 2. PENGENALAN DATA FILTERING

Dalam Pengolahan data menggunakan python, data bertipe `boolean` biasanya digunakan untuk melakukan proses filtering rows yang akan ditampilkan dari sebuah dataset.
"""

# Melakukan identifikasi apakah setiap elemen kolom `State` berisi 'Kentucky'
df_sales['State']=='Kentucky'

df_sales

# Menerapkan filter ke DataFrame
df_sales[df_sales['State']=='Kentucky']

# Menerapkan lebih dari satu filter ke DataFrame
df_sales[(df_sales['State']=='Kentucky') & (df_sales['Region']=='South')]

"""---
# STRING DATA
## Pengertian
String adalah tipe data di Python yang digunakan untuk merepresentasikan teks. String didefinisikan dengan menggunakan tanda kutip tunggal (`'...'`) atau tanda kutip ganda (`"..."`).

## String Assignment
Sebuah String bisa dideklarasikan dengan cara berikut:

```python
nama = "Python"
pesan = 'Selamat datang di dunia pemrograman!'
```

## Operasi String
1. **Akses Karakter**: Setiap karakter dalam string dapati diakses dengan menggunakan indeks.

   ```python
   teks = "Python"
   print(teks[0])  # Output: P
   print(teks[-1]) # Output: n
   ```
2. **Panjang String**: Gunakan fungsi `len()` untuk mendapatkan panjang string.

   ```python
   teks = "Pemrograman"
   print(len(teks))  # Output: 11
   ```
3. **Irisan (Slicing)**: Sebagian dari String dapat diambil dengan menggunakan teknik slicing.

   ```python
   teks = "Pemrograman"
   bagian = teks[0:3]
   print(bagian)  # Output: Pem
   ```

## String Manipulation
### Operasi Matematis

Beberapa operator matematis dapat dipergunakan untuk melakukan operasi terhadap data String. Seperti berikut di bawah ini:
1. **Concatenation**
  ```python
  nama_depan = 'Elon'
  nama_belakang = 'Musk'

  nama_depan + ' ' + nama_belakang # Output : "Elon Musk"
  ```
2. **Repetition**
  ```python
  'Python' * 5 # Output : PythonPythonPythonPythonPython
  ```

### String methods
> Methods adalah fungsi yang terkait dengan suatu objek tertentu dan digunakan untuk memanipulasi atribut atau mengenakan suatu aksi terhadap objek terkait.

Beberapa string methods yang cukup sering dipergunakan dalam pengolahan data String, antara lain:
1. **Case Changing**
  ```python
  # Merubah format string menjadi capital
  'Python'.upper()                  # Output : 'PYTHON'
  # Merubah format String ke lowercase
  'PyThon'.lower()                  # Output : 'python'
  # Menukar format String
  'PyThon'.swapcase()               # Output : pYtHON
  # Merubah format String menjadi format judul
  'aku suka belajar python'.title() # Output: 'Aku Suka Belajar Python'
  ```
2. **String Replacement**
  ```python
  # Mengganti karakter dengan karakter lain
  'Aku suka belajar Python'.replace('u','i') # Output : 'Aki sika belajar Python'
  ```
3. **White Space Stripping**
  ```python
  # Menghapus whitespace berlebihan di awal dan akhir dari String
  '      Aku suka belajar Python        '.strip() # Output : 'Aku suka belajar Python'
  ```
4. **String Splitting**
  ```python
  # Memisahkan text menjadi sebuah list berdasarkan separator tertentu
  'Aku suka belajar python'.split(sep=" ") # Output : ['Aku', 'suka', 'belajar', 'python']
  ```
5. **String Concatenation**
  ```python
  # Menggabungkan potongan string
  " ".join([nama_depan, nama_belakang]) # Output : "Elon Musk"
  ```
6. **Counting String**
  ```python
  # Menghitung kemunculan karakter tertentu
  'Aku suka belajar Python'.count('u') # Output : 2
  ```
7. **Finding String**
  ```python
  # Mengidentifikasi posisi keberapa suatu string pada text berada
  'Aku suka belajar python'.find('ajar') # Output : 12
  # Jika string yang dicari tidak ditemukan
  'Aku suka belajar python'.find('membaca') # Output : -1
  # Untuk mengidentifikasi apakah suatu string terdapat pada text
  'Aku suka belajar python'.find('dia')>-1 # Output : False
  ```

## String Formatting
> *String Formatting* adalah sebuah proses menyematkan string atau variabel ke dalam sebuah text tanpa menggunakan operator seperti pada *concatenation*.

Terdapat tiga cara *string formatting* yang sering digunakan dalam python adalah, sebagai berikut:

1. **`% Operator`**
  ```python
  # String Assignment
  query_by_provinsi = '''SELECT * FROM tbl_produksi WHERE nama_provinsi = '%s' AND nama_kabupaten = '%s';'''

  # Tampilkan String ke layar tanpa disemat argument
  print(query_by_provinsi)
  # Output : "SELECT * FROM tbl_produksi WHERE nama_provinsi = '%s' AND nama_kabupaten = '%s';"
  
  # Tampilkan String ke layar dengan disematkan argument
  print(query_by_provinsi % ('DKI JAKARTA', 'JAKARTA PUSAT'))
  # Output : "SELECT * FROM tbl_produksi WHERE nama_provinsi = 'DKI JAKARTA' AND nama_kabupaten = 'JAKARTA PUSAT';"

  # Jika jumlah argument yang disematkan tidak sesuai, akan mengakibatkan error
  print(query_by_provinsi % ('DKI JAKARTA'))
  # Output : 'TypeError: not enough arguments for format string'
  ```

2. **`str.format()` Method**
  ```python
  # String Assignment
  template_sapaan = "Hi,\nnama saya {},\numur saya {} tahun,\nsalam kenal!"

  # Sematkan argument ke dalam String
  sapa = template_sapaan.format(nama_lengkap, "17")

  # Tampilkan hasil formatting ke layar
  print(sapa)
  # Output :
    '''
    Hi,
    nama saya Rikrik Rahadian,
    umur saya 17 tahun,
    salam kenal!
    '''
  ```

3. **`f-strings`**
- **Formatting**
  ```python
  # String Assignment
  first_name = "Elon"
  last_name = "Musk"
  nomor_kamar = "512"
  waktu = "siang"
  # String Formatting
  template_greeting = f"Hallo Tuan {last_name}, selamat {waktu}, anda menginap di kamar {nomor_kamar}"
  # Tampilkan hasil formatting ke layar
  print(template_greeting)
  # Output : "Hallo Tuan Musk, selamat siang, anda menginap di kamar 512"
  ```

- **Alignment & Padding**
  ```python
  # String Assignment
  formatted_string = f"{'Elon Musk':*^30}"
  # Tampilkan string ke layar
  print(formatted_string)
  # Output : '**********Elon Musk***********'
  ```

Penjelasan script di atas:
  - **Value**: 'Elon Musk' adalah String yang akan diformat.
  - **Padding Character**: * memberikan spesifikasi bahwa value tersebut akan diberi *padding* berupa simbol *asterisks*.
  - **Alignment**: ^ mengindikasikan *alignment* dari value di tengah. Opsi lainnya adalah: < untuk *left alignment* dan > untuk *right alignment*.
  - **Width**: 30 menunjukkan total karakter seluruhnya meliputi value dari string ditambah padding yang diulang sebanyak sisa total karakter dikurangi jumlah karakter dari value.

## Kesimpulan
String adalah bagian penting dalam pemrograman Python yang memungkinkan programmer untuk memanipulasi dan bekerja dengan teks secara efisien. Memahami operasi dasar dan metode string akan membantu mengelola data teks dengan lebih baik.

## Praktek Data String
"""

# Serangkaian Karakter yang sama dengan tanda kutip berbeda, akan dianggap sama oleh python
hello_satu = 'Hello world'
hello_dua = "Hello world"
hello_satu == hello_dua

# Tanda kutip singel di baris berbeda akan membangkitkan error
"Hello World
"

# Data String dengan multi baris
query_pertama = """
SELECT
  col1,
  col2,
  col3
FROM tbl_produksi
LIMIT 5;
"""
print(query_pertama)

# Data string multi baris pada memory
query_pertama

# Data String dengan multi baris
query_kedua = "SELECT\n  col1,\n  col2,\n  col3\nFROM tbl_produksi \nLIMIT 5;"
print(query_kedua)

# Slicing Data String
nama_lengkap = "Rikrik Rahadian"
nama_lengkap[10] # Slicing

nama_lengkap[2]

nama_lengkap[3:6]

nama_lengkap[3:6:2]

"""___
## **EXERCISE**

Pada bagian exercise ini kita akan mencoba membuat sebuah program untuk melakukan proses penginputan informasi calon responden ke dalam sebuah daftar responden, dengan data berupa nama, nomor telepon, dan tanggal lahir.
"""

# MEMBUAT DAFTAR CALON RESPONDEN
# 1. Persiapan
# Set sebuah list kosong sebagai `friends_listed`
respondent_listed = []

# 2. Proses Mengisi Daftar
# Buat unlimited loop
while True:
  # Cek apakah user akan mengisi data ke daftar
  pilihan = input("Apakah ada nama yang akan ditambahkan ke list? (1=ya/0=tidak) ")
  # Validasi pilihan user
  # Apakah pilihan user benar??
  if pilihan not in ['0', '1']:
    print("Pilihan tidak valid, silahkan pilih 1 atau 0!")
    pass

  # Jika tidak tambah barang
  if pilihan == '0':
    break # Hentikan unlimited loop
  # Jika tambah barang
  elif pilihan == '1':
    # Mintakan nama lengkap
    nama_lengkap = input('Nama Lengkap: ')
    # Mintakan jumlah yang diperlukan
    nomor_telepon = input('Nomor Telepon: ')
    # Mintakan Satuan
    dob = input("Tanggal Lahir: (dd/mm/yyyy)")
    # Tambahkan kebutuhan ke dalam list `respondent_listed`
    respondent_listed.append((nama_lengkap, nomor_telepon, dob))

# 3. Tampilkan daftar ke layar
# Buat Judul tabel
print(f"\n{'DAFTAR CALON RESPONDEN':-^60}")
# Buat Garis Pembatas
print(f"{'':=^60}")
# Buat Header Tabel
print(f"{'NO': ^4}", f"{'NAMA': ^20}", f"{'TELEPON': ^20}", f"{'DOB': ^13}", sep = "|")
# Buat Garis Pembatas baris
print(f"{'':-^60}")
# Buat loop berdasarkan elemen pada `respondent_listed`
for idx, item in enumerate(respondent_listed):
  print(f"{idx+1: >4}", f"{item[0]: <20}", f"{item[1]: >20}", f"{item[2]: ^13}", sep = "|")
# Buat Garis Pembatas
print(f"{'':=^60}")

# Cek isi list `friends_listed`
respondent_listed

type(respondent_listed)

"""___
#### 3. PENGENALAN PENGOLAHAN DATA `string`
"""

# CONVERT `respondent_listed` MENJADI SEBUAH DATAFRAME
# Gunakan method `DataFrame` dari modul `pandas`
daftar_responden = pd.DataFrame(respondent_listed, columns=['NAMA', 'TELEPON', 'DOB'])
# Check isi DataFrame `daftar_responden`
daftar_responden

# 1. Buat copy dari `daftar_responden`
df_responden = daftar_responden.copy()

# Basic String Splitting
df_responden['NAMA'].str.split(" ", expand=True)

# Basic Columns Filtering
df_responden[['FIRSTNAME', 'LASTNAME', 'TELEPON', 'DOB']]

# 2. Buat Kolom baru `FIRSTNAME`
df_responden['FIRSTNAME'] = df_responden['NAMA'].str.split(" ", expand=True)[0]

# 3. Buat Kolom baru `LASTNAME`
df_responden['LASTNAME'] = df_responden['NAMA'].str.split(" ", expand=True)[1]

# 4. Filter Kolom yang ditampilkan
df_responden_ = df_responden[['FIRSTNAME', 'LASTNAME', 'TELEPON', 'DOB']]

# Cek hasil pengolahan
df_responden_

df_responden_

# Pengolahan Data String dengan Method Chaining
(daftar_responden
 .join(daftar_responden['NAMA'].str.split(" ", expand=True))
 .rename(columns={0:'FIRSTNAME', 1:'LASTNAME'})
 .loc[:,['FIRSTNAME', 'LASTNAME', 'TELEPON', 'DOB']])

df_responden_.info()

"""___
#### 4. PENGENALAN PENGOLAHAN DATA `datetime`
"""

# Casting string to datetime
df_responden_['DOB'] = pd.to_datetime(df_responden_['DOB'], dayfirst=True)

# Datetime operation: Menghitung Umur Responden
from datetime import datetime
df_responden_['UMUR'] = datetime.now().year - df_responden_['DOB'].dt.year
df_responden_

# Method Chaining
(daftar_responden
 .join(daftar_responden['NAMA'].str.split(" ", expand=True))
 .rename(columns={0:'FIRSTNAME', 1:'LASTNAME'})
 .loc[:,['FIRSTNAME', 'LASTNAME', 'TELEPON', 'DOB']]
 .assign(DOB=lambda x: pd.to_datetime(x['DOB'], dayfirst=True),
         UMUR=lambda x: datetime.now().year - x['DOB'].dt.year))

df_responden_.info()

"""___"""